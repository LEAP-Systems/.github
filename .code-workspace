{
    "folders": [
      {
        "path": "."
      }
    ],
    "extensions": {
      "recommendations": [
        "ms-python.python",
        "ms-vscode.cpptools",
        "ms-python.vscode-pylance",
        "ms-vscode-remote.remote-ssh",
        "visualstudioexptteam.vscodeintellicode",
        "mine.cpplint",
        "eamodio.gitlens",
        "njpwerner.autodocstring",
        "yzhang.markdown-all-in-one",
        "kevinglasson.cornflakes-linter"
      ]
    },
    "settings": {
      // autoformatting config for python
      "python.formatting.provider": "autopep8",
      "python.formatting.autopep8Args": [
        "--ignore=E701",
        "--max-line-length",
        "120"
      ],
      // linting config for python
      "python.linting.enabled": true,
      "python.linting.lintOnSave": true,
      // autodoc config for python
      "autoDocstring.docstringFormat": "sphinx",
      // pylance / pyright config
      "python.analysis.typeCheckingMode": "basic",
      "python.analysis.autoImportCompletions": true,
      // c / cpp config
      "C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: Google, IndentWidth: 2, ColumnLimit: 0}",
      "C_Cpp.errorSquiggles": "EnabledIfIncludesResolve", 
      // cpp lint config
      "cpplint.root": "${workspaceFolder}",
      "cpplint.repository": "${workspaceFolder}",
      "cpplint.lintMode": "workspace",
      "cpplint.cpplintPath":"/opt/homebrew/bin/cpplint",
      "cpplint.extensions": [
          "cpp",
          "c",
          "h",
          "ino"
      ], 
      // Default Configuration Overrides
      // Configure editor settings to be overridden for [css] language.
      "[python]": {
        "gitlens.codeLens.symbolScopes": [
          "!Module"
        ],
        "editor.formatOnSaveMode": "file",
        "editor.wordBasedSuggestions": false,
        "editor.wordWrap": "on",
        "editor.rulers": [100],
      },
      
      "[c]": {
        "editor.rulers": [80],
        "editor.wordWrap": "on",
        "editor.wordBasedSuggestions": false,
        "editor.suggest.insertMode": "replace",
        "editor.semanticHighlighting.enabled": true
      },

      "[cpp]": {
        "editor.rulers": [80],
        "editor.wordWrap": "on",
        "editor.wordBasedSuggestions": false,
        "editor.suggest.insertMode": "replace",
        "editor.semanticHighlighting.enabled": true
      },

      "[css]": {
        "editor.suggest.insertMode": "replace"
      },
  
      // Configure editor settings to be overridden for [dockerfile] language.
      "[dockerfile]": {
        "editor.quickSuggestions": {
          "strings": true
        }
      },
  
      // Configure editor settings to be overridden for [git-commit] language.
      "[git-commit]": {
        "editor.rulers": [72]
      },

      // Configure editor settings to be overridden for [html] language.
      "[html]": {
        "editor.suggest.insertMode": "replace"
      },
  
      // Configure editor settings to be overridden for [json] language.
      "[json]": {
        "editor.quickSuggestions": {
          "strings": true
        },
        "editor.suggest.insertMode": "replace"
      },
  
      // Configure editor settings to be overridden for [less] language.
      "[less]": {
        "editor.suggest.insertMode": "replace"
      },
  
      // Configure editor settings to be overridden for [makefile] language.
      "[makefile]": {
        "editor.insertSpaces": false
      },
  
      // Configure editor settings to be overridden for [markdown] language.
      "[markdown]": {
        "editor.wordWrap": "on",
        "editor.quickSuggestions": false
      },
  
      // Configure editor settings to be overridden for [search-result] language.
      "[search-result]": {
        "editor.lineNumbers": "off"
      },
  
      // Configure editor settings to be overridden for [shellscript] language.
      "[shellscript]": {
        "files.eol": "\n"
      },
  
      // Configure editor settings to be overridden for [yaml] language.
      "[yaml]": {
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.autoIndent": "advanced"
      }, 
      
          // When enabled, the diff editor ignores changes in leading or trailing whitespace.
      "diffEditor.ignoreTrimWhitespace": true,
  
      // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
      "diffEditor.maxComputationTime": 5000,
  
      // Controls whether the diff editor shows +/- indicators for added/removed changes.
      "diffEditor.renderIndicators": true,
  
      // Controls whether the diff editor shows the diff side by side or inline.
      "diffEditor.renderSideBySide": true,
  
      // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
      "editor.acceptSuggestionOnCommitCharacter": true,
  
      // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
      //  - on
      //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
      //  - off
      "editor.acceptSuggestionOnEnter": "on",
  
      // Controls the number of lines in the editor that can be read out by a screen reader. Warning: this has a performance implication for numbers larger than the default.
      "editor.accessibilityPageSize": 10,
  
      // Controls whether the editor should run in a mode where it is optimized for screen readers.
      //  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
      //  - on: The editor will be permanently optimized for usage with a Screen Reader.
      //  - off: The editor will never be optimized for usage with a Screen Reader.
      "editor.accessibilitySupport": "auto",
  
      // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
      //  - always
      //  - languageDefined: Use language configurations to determine when to autoclose brackets.
      //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
      //  - never
      "editor.autoClosingBrackets": "languageDefined",
  
      // Controls whether the editor should type over closing quotes or brackets.
      //  - always
      //  - auto: Type over closing quotes or brackets only if they were automatically inserted.
      //  - never
      "editor.autoClosingOvertype": "auto",
  
      // Controls whether the editor should automatically close quotes after the user adds an opening quote.
      //  - always
      //  - languageDefined: Use language configurations to determine when to autoclose quotes.
      //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
      //  - never
      "editor.autoClosingQuotes": "languageDefined",
  
      // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
      //  - none: The editor will not insert indentation automatically.
      //  - keep: The editor will keep the current line's indentation.
      //  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
      //  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
      //  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
      "editor.autoIndent": "full",
  
      // Controls whether the editor should automatically surround selections.
      //  - languageDefined: Use language configurations to determine when to automatically surround selections.
      //  - quotes: Surround with quotes but not brackets.
      //  - brackets: Surround with brackets but not quotes.
      //  - never
      "editor.autoSurround": "languageDefined",
  
      // Code action kinds to be run on save.
      "editor.codeActionsOnSave": {},
  
      // Controls whether the editor shows CodeLens.
      "editor.codeLens": true,
  
      // Controls whether the editor should render the inline color decorators and color picker.
      "editor.colorDecorators": true,
  
      // Enable that the selection with the mouse and keys is doing column selection.
      "editor.columnSelection": false,
  
      // Controls whether a space character is inserted when commenting.
      "editor.comments.insertSpace": true,
  
      // Controls whether syntax highlighting should be copied into the clipboard.
      "editor.copyWithSyntaxHighlighting": true,
  
      // Control the cursor animation style.
      "editor.cursorBlinking": "blink",
  
      // Controls whether the smooth caret animation should be enabled.
      "editor.cursorSmoothCaretAnimation": false,
  
      // Controls the cursor style.
      "editor.cursorStyle": "line",
  
      // Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or `scrollOffset` in some other editors.
      "editor.cursorSurroundingLines": 0,
  
      // Controls when `cursorSurroundingLines` should be enforced.
      //  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
      //  - all: `cursorSurroundingLines` is enforced always.
      "editor.cursorSurroundingLinesStyle": "default",
  
      // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
      "editor.cursorWidth": 0,
  
      // Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
      "editor.defaultFormatter": null,
  
      // Controls whether the Go to Definition mouse gesture always opens the peek widget.
      "editor.definitionLinkOpensInPeek": false,
  
      // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
      "editor.detectIndentation": true,
  
      // Controls whether the editor should allow moving selections via drag and drop.
      "editor.dragAndDrop": true,
  
      // Controls whether copying without a selection copies the current line.
      "editor.emptySelectionClipboard": true,
  
      // Scrolling speed multiplier when pressing `Alt`.
      "editor.fastScrollSensitivity": 5,
  
      // Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
      "editor.find.addExtraSpaceOnTop": true,
  
      // Controls whether the find operation is carried out on selected text or the entire file in the editor.
      //  - never: Never turn on Find in selection automatically (default)
      //  - always: Always turn on Find in selection automatically
      //  - multiline: Turn on Find in selection automatically when multiple lines of content are selected.
      "editor.find.autoFindInSelection": "never",
  
      // Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
      "editor.find.globalFindClipboard": false,
  
      // Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
      "editor.find.loop": true,
  
      // Controls whether the search string in the Find Widget is seeded from the editor selection.
      "editor.find.seedSearchStringFromSelection": true,
  
      // Controls whether the editor has code folding enabled.
      "editor.folding": true,
  
      // Controls whether the editor should highlight folded ranges.
      "editor.foldingHighlight": true,
  
      // Controls the strategy for computing folding ranges.
      //  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
      //  - indentation: Use the indentation-based folding strategy.
      "editor.foldingStrategy": "auto",
  
      // Configures font ligatures or font features.
      "editor.fontLigatures": false,
  
      // Controls the font size in pixels.
      "editor.fontSize": 12,
  
      // Controls the font weight.
      "editor.fontWeight": "normal",
  
      // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
      "editor.formatOnPaste": false,
  
      // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
      "editor.formatOnSave": true,
  
      // Controls whether the editor should automatically format the line after typing.
      "editor.formatOnType": false,
  
      // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
      "editor.glyphMargin": true,
  
      // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
      "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
  
      // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
      "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
  
      // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
      "editor.gotoLocation.alternativeImplementationCommand": "",
  
      // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
      "editor.gotoLocation.alternativeReferenceCommand": "",
  
      // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
      "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
  
      // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
      //  - peek: Show peek view of the results (default)
      //  - gotoAndPeek: Go to the primary result and show a peek view
      //  - goto: Go to the primary result and enable peek-less navigation to others
      "editor.gotoLocation.multipleDeclarations": "peek",
  
      // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
      //  - peek: Show peek view of the results (default)
      //  - gotoAndPeek: Go to the primary result and show a peek view
      //  - goto: Go to the primary result and enable peek-less navigation to others
      "editor.gotoLocation.multipleDefinitions": "peek",
  
      // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
      //  - peek: Show peek view of the results (default)
      //  - gotoAndPeek: Go to the primary result and show a peek view
      //  - goto: Go to the primary result and enable peek-less navigation to others
      "editor.gotoLocation.multipleImplementations": "peek",
  
      // Controls the behavior the 'Go to References'-command when multiple target locations exist.
      //  - peek: Show peek view of the results (default)
      //  - gotoAndPeek: Go to the primary result and show a peek view
      //  - goto: Go to the primary result and enable peek-less navigation to others
      "editor.gotoLocation.multipleReferences": "peek",
  
      // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
      //  - peek: Show peek view of the results (default)
      //  - gotoAndPeek: Go to the primary result and show a peek view
      //  - goto: Go to the primary result and enable peek-less navigation to others
      "editor.gotoLocation.multipleTypeDefinitions": "peek",
  
      // Controls whether the cursor should be hidden in the overview ruler.
      "editor.hideCursorInOverviewRuler": false,
  
      // Controls whether the editor should highlight the active indent guide.
      "editor.highlightActiveIndentGuide": true,
  
      // Controls the delay in milliseconds after which the hover is shown.
      "editor.hover.delay": 300,
  
      // Controls whether the hover is shown.
      "editor.hover.enabled": true,
  
      // Controls whether the hover should remain visible when mouse is moved over it.
      "editor.hover.sticky": true,
  
      // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
      "editor.insertSpaces": true,
  
      // Controls the letter spacing in pixels.
      "editor.letterSpacing": 0,
  
      // Enables the code action lightbulb in the editor.
      "editor.lightbulb.enabled": true,
  
      // Controls the line height. Use 0 to compute the line height from the font size.
      "editor.lineHeight": 0,
  
      // Controls the display of line numbers.
      //  - off: Line numbers are not rendered.
      //  - on: Line numbers are rendered as absolute number.
      //  - relative: Line numbers are rendered as distance in lines to cursor position.
      //  - interval: Line numbers are rendered every 10 lines.
      "editor.lineNumbers": "on",
  
      // Controls whether the editor should detect links and make them clickable.
      "editor.links": true,
  
      // Highlight matching brackets.
      "editor.matchBrackets": "always",
  
      // Controls whether the minimap is shown.
      "editor.minimap.enabled": true,
  
      // Limit the width of the minimap to render at most a certain number of columns.
      "editor.minimap.maxColumn": 120,
  
      // Render the actual characters on a line as opposed to color blocks.
      "editor.minimap.renderCharacters": true,
  
      // Scale of content drawn in the minimap: 1, 2 or 3.
      "editor.minimap.scale": 1,
  
      // Controls when the minimap slider is shown.
      "editor.minimap.showSlider": "mouseover",
  
      // Controls the side where to render the minimap.
      "editor.minimap.side": "right",
  
      // Controls the size of the minimap.
      //  - proportional: The minimap has the same size as the editor contents (and might scroll).
      //  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
      //  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
      "editor.minimap.size": "proportional",
  
      // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
      "editor.mouseWheelScrollSensitivity": 1,
  
      // Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
      "editor.mouseWheelZoom": false,
  
      // The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
      //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
      //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
      "editor.multiCursorModifier": "alt",
  
      // Controls pasting when the line count of the pasted text matches the cursor count.
      //  - spread: Each cursor pastes a single line of the text.
      //  - full: Each cursor pastes the full text.
      "editor.multiCursorPaste": "spread",
  
      // Controls whether the editor should highlight semantic symbol occurrences.
      "editor.occurrencesHighlight": true,
  
      // Controls whether a border should be drawn around the overview ruler.
      "editor.overviewRulerBorder": true,
  
      // Controls the amount of space between the bottom edge of the editor and the last line.
      "editor.padding.bottom": 0,
  
      // Controls the amount of space between the top edge of the editor and the first line.
      "editor.padding.top": 0,
  
      // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
      "editor.parameterHints.cycle": false,
  
      // Enables a pop-up that shows parameter documentation and type information as you type.
      "editor.parameterHints.enabled": true,
  
      // Controls whether to focus the inline editor or the tree in the peek widget.
      //  - tree: Focus the tree when opening peek
      //  - editor: Focus the editor when opening peek
      "editor.peekWidgetDefaultFocus": "tree",
  
      // Controls whether suggestions should automatically show up while typing.
      "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
      },
  
      // Controls the delay in milliseconds after which quick suggestions will show up.
      "editor.quickSuggestionsDelay": 10,
  
      // Enable/disable the ability to preview changes before renaming
      "editor.rename.enablePreview": true,
  
      // Controls whether the editor should render control characters.
      "editor.renderControlCharacters": false,
  
      // Render last line number when the file ends with a newline.
      "editor.renderFinalNewline": true,
  
      // Controls whether the editor should render indent guides.
      "editor.renderIndentGuides": true,
  
      // Controls how the editor should render the current line highlight.
      //  - none
      //  - gutter
      //  - line
      //  - all: Highlights both the gutter and the current line.
      "editor.renderLineHighlight": "line",
  
      // Controls if the editor should render the current line highlight only when the editor is focused
      "editor.renderLineHighlightOnlyWhenFocus": false,
  
      // Controls how the editor should render whitespace characters.
      //  - none
      //  - boundary: Render whitespace characters except for single spaces between words.
      //  - selection: Render whitespace characters only on selected text.
      //  - all
      "editor.renderWhitespace": "selection",
  
      // Controls whether selections should have rounded corners.
      "editor.roundedSelection": true,
  
      // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
      "editor.rulers": [120],
  
      // Controls the number of extra characters beyond which the editor will scroll horizontally.
      "editor.scrollBeyondLastColumn": 5,
  
      // Controls whether the editor will scroll beyond the last line.
      "editor.scrollBeyondLastLine": true,
  
      // Controls whether the Linux primary clipboard should be supported.
      "editor.selectionClipboard": true,
  
      // Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
      "editor.scrollPredominantAxis": true,
  
      // Controls whether the editor should highlight matches similar to the selection.
      "editor.selectionHighlight": true,
  
      //  - true: Semantic highlighting enabled for all color themes.
      //  - false: Semantic highlighting disabled for all color themes.
      //  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
      "editor.semanticHighlighting.enabled": "configuredByTheme",
  
      // Overrides editor semantic token color and styles from the currently selected color theme.
      "editor.semanticTokenColorCustomizations": {},
  
      // Controls when the folding controls on the gutter are shown.
      //  - always: Always show the folding controls.
      //  - mouseover: Only show the folding controls when the mouse is over the gutter.
      "editor.showFoldingControls": "mouseover",
  
      // Controls fading out of unused code.
      "editor.showUnused": true,
  
      // Controls whether the editor will scroll using an animation.
      "editor.smoothScrolling": false,
  
      // Controls whether snippets are shown with other suggestions and how they are sorted.
      //  - top: Show snippet suggestions on top of other suggestions.
      //  - bottom: Show snippet suggestions below other suggestions.
      //  - inline: Show snippets suggestions with other suggestions.
      //  - none: Do not show snippet suggestions.
      "editor.snippetSuggestions": "inline",
  
      // Keep peek editors open even when double clicking their content or when hitting `Escape`.
      "editor.stablePeek": false,
  
      // Controls whether filtering and sorting suggestions accounts for small typos.
      "editor.suggest.filterGraceful": true,
  
      // Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
      //  - insert: Insert suggestion without overwriting text right of the cursor.
      //  - replace: Insert suggestion and overwrite text right of the cursor.
      "editor.suggest.insertMode": "insert",
  
      // Controls whether sorting favours words that appear close to the cursor.
      "editor.suggest.localityBonus": false,
  
      // Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
      "editor.suggest.shareSuggestSelections": false,
  
      // When enabled IntelliSense shows `class`-suggestions.
      "editor.suggest.showClasses": true,
  
      // When enabled IntelliSense shows `color`-suggestions.
      "editor.suggest.showColors": true,
  
      // When enabled IntelliSense shows `constant`-suggestions.
      "editor.suggest.showConstants": true,
  
      // When enabled IntelliSense shows `constructor`-suggestions.
      "editor.suggest.showConstructors": true,
  
      // When enabled IntelliSense shows `customcolor`-suggestions.
      "editor.suggest.showCustomcolors": true,
  
      // When enabled IntelliSense shows `enumMember`-suggestions.
      "editor.suggest.showEnumMembers": true,
  
      // When enabled IntelliSense shows `enum`-suggestions.
      "editor.suggest.showEnums": true,
  
      // When enabled IntelliSense shows `event`-suggestions.
      "editor.suggest.showEvents": true,
  
      // When enabled IntelliSense shows `field`-suggestions.
      "editor.suggest.showFields": true,
  
      // When enabled IntelliSense shows `file`-suggestions.
      "editor.suggest.showFiles": true,
  
      // When enabled IntelliSense shows `folder`-suggestions.
      "editor.suggest.showFolders": true,
  
      // When enabled IntelliSense shows `function`-suggestions.
      "editor.suggest.showFunctions": true,
  
      // Controls whether to show or hide icons in suggestions.
      "editor.suggest.showIcons": true,
  
      // When enabled IntelliSense shows `interface`-suggestions.
      "editor.suggest.showInterfaces": true,
  
      // When enabled IntelliSense shows `issues`-suggestions.
      "editor.suggest.showIssues": true,
  
      // When enabled IntelliSense shows `keyword`-suggestions.
      "editor.suggest.showKeywords": true,
  
      // When enabled IntelliSense shows `method`-suggestions.
      "editor.suggest.showMethods": true,
  
      // When enabled IntelliSense shows `module`-suggestions.
      "editor.suggest.showModules": true,
  
      // When enabled IntelliSense shows `operator`-suggestions.
      "editor.suggest.showOperators": true,
  
      // When enabled IntelliSense shows `property`-suggestions.
      "editor.suggest.showProperties": true,
  
      // When enabled IntelliSense shows `reference`-suggestions.
      "editor.suggest.showReferences": true,
  
      // When enabled IntelliSense shows `snippet`-suggestions.
      "editor.suggest.showSnippets": true,
  
      // When enabled IntelliSense shows `struct`-suggestions.
      "editor.suggest.showStructs": true,
  
      // When enabled IntelliSense shows `typeParameter`-suggestions.
      "editor.suggest.showTypeParameters": true,
  
      // When enabled IntelliSense shows `unit`-suggestions.
      "editor.suggest.showUnits": true,
  
      // When enabled IntelliSense shows `user`-suggestions.
      "editor.suggest.showUsers": true,
  
      // When enabled IntelliSense shows `value`-suggestions.
      "editor.suggest.showValues": true,
  
      // When enabled IntelliSense shows `variable`-suggestions.
      "editor.suggest.showVariables": true,
  
      // When enabled IntelliSense shows `text`-suggestions.
      "editor.suggest.showWords": true,
  
      // Controls whether an active snippet prevents quick suggestions.
      "editor.suggest.snippetsPreventQuickSuggestions": true,
  
      // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
      "editor.suggestFontSize": 0,
  
      // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used.
      "editor.suggestLineHeight": 0,
  
      // Controls whether suggestions should automatically show up when typing trigger characters.
      "editor.suggestOnTriggerCharacters": true,
  
      // Controls how suggestions are pre-selected when showing the suggest list.
      //  - first: Always select the first suggestion.
      //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
      //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
      "editor.suggestSelection": "recentlyUsed",
  
      // Enables tab completions.
      //  - on: Tab complete will insert the best matching suggestion when pressing tab.
      //  - off: Disable tab completions.
      //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
      "editor.tabCompletion": "off",
  
      // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
      "editor.tabSize": 4,
  
      // Overrides editor syntax colors and font style from the currently selected color theme.
      "editor.tokenColorCustomizations": {},
  
      // Remove trailing auto inserted whitespace.
      "editor.trimAutoWhitespace": true,
  
      // Controls whether clicking on the empty content after a folded line will unfold the line.
      "editor.unfoldOnClickAfterEndOfLine": false,
  
      // Remove unusual line terminators that might cause problems.
      //  - off: Unusual line terminators are ignored.
      //  - prompt: Unusual line terminators prompt to be removed.
      //  - auto: Unusual line terminators are automatically removed.
      "editor.unusualLineTerminators": "prompt",
  
      // Inserting and deleting whitespace follows tab stops.
      "editor.useTabStops": true,
  
      // Controls whether completions should be computed based on words in the document.
      "editor.wordBasedSuggestions": true,
  
      // Characters that will be used as word separators when doing word related navigations or operations.
      "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
  
      // Controls how lines should wrap.
      //  - off: Lines will never wrap.
      //  - on: Lines will wrap at the viewport width.
      //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
      //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
      "editor.wordWrap": "off",
  
      // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
      "editor.wordWrapColumn": 80,
  
      // Controls the indentation of wrapped lines.
      //  - none: No indentation. Wrapped lines begin at column 1.
      //  - same: Wrapped lines get the same indentation as the parent.
      //  - indent: Wrapped lines get +1 indentation toward the parent.
      //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
      "editor.wrappingIndent": "same",
  
      // Controls the algorithm that computes wrapping points.
      //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
      //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
      "editor.wrappingStrategy": "simple",
  
      // SCM
  
      // Controls whether inline actions are always visible in the Source Control view.
      "scm.alwaysShowActions": false,
  
      // Controls whether the SCM view should automatically reveal and select files when opening them.
      "scm.autoReveal": true,
  
      // Controls the Source Control count badge.
      //  - all: Show the sum of all Source Control Providers count badges.
      //  - focused: Show the count badge of the focused Source Control Provider.
      //  - off: Disable the Source Control count badge.
      "scm.countBadge": "all",
  
      // Controls the default Source Control repository view mode.
      //  - tree: Show the repository changes as a tree.
      //  - list: Show the repository changes as a list.
      "scm.defaultViewMode": "list",
  
      // Controls diff decorations in the editor.
      //  - all: Show the diff decorations in all available locations.
      //  - gutter: Show the diff decorations only in the editor gutter.
      //  - overview: Show the diff decorations only in the overview ruler.
      //  - minimap: Show the diff decorations only in the minimap.
      //  - none: Do not show the diff decorations.
      "scm.diffDecorations": "all",
  
      // Controls the visibility of the Source Control diff decorator in the gutter.
      //  - always: Show the diff decorator in the gutter at all times.
      //  - hover: Show the diff decorator in the gutter only on hover.
      "scm.diffDecorationsGutterVisibility": "always",
  
      // Controls the width(px) of diff decorations in gutter (added & modified).
      "scm.diffDecorationsGutterWidth": 3,
  
      // Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
      "scm.inputFontFamily": "default",
  
      // If set, automatically switch to the preferred color theme based on the OS appearance.
      "window.autoDetectColorScheme": false,
  
      // Workbench
  
      // Controls the visibility of the activity bar in the workbench.
      "workbench.activityBar.visible": true,
  
      // Overrides colors from the currently selected color theme.
      "workbench.colorCustomizations": {},
  
      // Specifies the color theme used in the workbench.
      "workbench.colorTheme": "Default Dark+",
  
      // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
      "workbench.commandPalette.history": 50,
  
      // Controls whether the last typed input to the command palette should be restored when opening it the next time.
      "workbench.commandPalette.preserveInput": false,
  
      // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
      "workbench.editor.centeredLayoutAutoResize": true,
  
      // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
      "workbench.editor.closeEmptyGroups": true,
  
      // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
      "workbench.editor.closeOnFileDelete": false,
  
      // Controls whether opened editors show as preview. Preview editors are reused until they are explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.
      "workbench.editor.enablePreview": true,
  
      // Controls whether editors opened from Quick Open show as preview. Preview editors are reused until they are explicitly set to be kept open (e.g. via double click or editing).
      "workbench.editor.enablePreviewFromQuickOpen": true,
  
      // Controls whether tabs are closed in most recently used order or from left to right.
      "workbench.editor.focusRecentEditorAfterClose": true,
  
      // Controls whether a top border is drawn on modified (dirty) editor tabs or not.
      "workbench.editor.highlightModifiedTabs": false,
  
      // Controls the format of the label for an editor.
      //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
      //  - short: Show the name of the file followed by its directory name.
      //  - medium: Show the name of the file followed by its path relative to the workspace folder.
      //  - long: Show the name of the file followed by its absolute path.
      "workbench.editor.labelFormat": "default",
  
      // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors that are not dirty will close to make space for newly opening editors.
      "workbench.editor.limit.enabled": false,
  
      // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
      "workbench.editor.limit.perEditorGroup": false,
  
      // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
      "workbench.editor.limit.value": 10,
  
      // Navigate between open files using mouse buttons four and five if provided.
      "workbench.editor.mouseBackForwardToNavigate": true,
  
      // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
      "workbench.editor.openPositioning": "right",
  
      // Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
      "workbench.editor.openSideBySideDirection": "right",
  
      // Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.
      "workbench.editor.restoreViewState": true,
  
      // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
      "workbench.editor.revealIfOpen": false,
  
      // Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behaviour for that duration.
      "workbench.editor.scrollToSwitchTabs": false,
  
      // Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
      "workbench.editor.showIcons": true,
  
      // Controls whether opened editors should show in tabs or not.
      "workbench.editor.showTabs": true,
  
      // Controls the sizing of editor groups when splitting them.
      //  - distribute: Splits all the editor groups to equal parts.
      //  - split: Splits the active editor group to equal parts.
      "workbench.editor.splitSizing": "distribute",
  
      // Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.
      "workbench.editor.tabCloseButton": "right",
  
      // Controls the sizing of editor tabs.
      //  - fit: Always keep tabs large enough to show the full editor label.
      //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
      "workbench.editor.tabSizing": "fit",
  
      // Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
      //  - default: The default size.
      //  - large: Increases the size, so it can be grabed more easily with the mouse
      "workbench.editor.titleScrollbarSizing": "default",
  
      // Controls the format of the label for an untitled editor.
      //  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
      //  - name: The name of the untitled file is not derived from the contents of the file.
      "workbench.editor.untitled.labelFormat": "content",
  
      // Configure which editor to use for specific file types.
      // Controls font aliasing method in the workbench.
      //  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
      //  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
      //  - none: Disables font smoothing. Text will show with jagged sharp edges.
      //  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
      "workbench.fontAliasing": "default",
  
      // Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
      //  - null: No file icons
      //  - vs-minimal
      //  - vs-seti
      "workbench.iconTheme": "vs-seti",
  
      // Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
      "workbench.list.automaticKeyboardNavigation": true,
  
      // Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
      "workbench.list.horizontalScrolling": false,
  
      // Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
      //  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
      //  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
      //  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
      "workbench.list.keyboardNavigation": "highlight",
  
      // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
      //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
      //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
      "workbench.list.multiSelectModifier": "ctrlCmd",
  
      // Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable.
      "workbench.list.openMode": "singleClick",
  
      // Controls whether lists and trees have smooth scrolling.
      "workbench.list.smoothScrolling": false,
  
      // Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom, right, or left of the workbench.
      "workbench.panel.defaultLocation": "bottom",
  
      // Specifies the preferred color theme for dark OS appearance when 'window.autoDetectColorScheme' is enabled.
      "workbench.preferredDarkColorTheme": "Default Dark+",
  
      // Specifies the preferred color theme used in high contrast mode when 'window.autoDetectHighContrast' is enabled.
      "workbench.preferredHighContrastColorTheme": "Default High Contrast",
  
      // Specifies the preferred color theme for light OS appearance when 'window.autoDetectColorScheme' is enabled.
      "workbench.preferredLightColorTheme": "Default Light+",
  
      // Specifies the product icon theme used.
      //  - Default: Default
      "workbench.productIconTheme": "Default",
  
      // Controls whether Quick Open should close automatically once it loses focus.
      "workbench.quickOpen.closeOnFocusLost": true,
  
      // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
      "workbench.quickOpen.preserveInput": false,
  
      // Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
      "workbench.sash.size": 4,
  
      // Determines which settings editor to use by default.
      //  - ui: Use the settings UI editor.
      //  - json: Use the JSON file editor.
      "workbench.settings.editor": "ui",
  
      // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
      "workbench.settings.enableNaturalLanguageSearch": true,
  
      // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
      "workbench.settings.openDefaultKeybindings": false,
  
      // Controls whether opening settings also opens an editor showing all default settings.
      "workbench.settings.openDefaultSettings": false,
  
      // Controls the behavior of the settings editor Table of Contents while searching.
      //  - hide: Hide the Table of Contents while searching.
      //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
      "workbench.settings.settingsSearchTocBehavior": "filter",
  
      // Controls whether to use the split JSON editor when editing settings as JSON.
      "workbench.settings.useSplitJSON": false,
  
      // Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.
      "workbench.sideBar.location": "left",
  
      // Controls which editor is shown at startup, if none are restored from the previous session.
      //  - none: Start without an editor.
      //  - welcomePage: Open the Welcome page (default).
      //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.
      //  - newUntitledFile: Open a new untitled file (only applies when opening an empty workspace).
      //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
      "workbench.startupEditor": "welcomePage",
  
      // Controls the visibility of the status bar at the bottom of the workbench.
      "workbench.statusBar.visible": true,
  
      // When enabled, will show the watermark tips when no editor is open.
      "workbench.tips.enabled": true,
  
      // Controls tree indentation in pixels.
      "workbench.tree.indent": 8,
  
      // Controls whether the tree should render indent guides.
      "workbench.tree.renderIndentGuides": "onHover",
  
      // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
      "workbench.view.alwaysShowHeaderActions": false,
  
      // Window
  
      // If enabled, will automatically change to high contrast theme if Windows is using a high contrast theme, and to dark theme when switching away from a Windows high contrast theme.
      "window.autoDetectHighContrast": true,
  
      // If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
      "window.clickThroughInactive": true,
  
      // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
      "window.closeWhenEmpty": false,
  
      // Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key.
      "window.customMenuBarAltFocus": true,
  
      // If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
      "window.doubleClickIconToClose": false,
  
      // Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
      "window.nativeFullScreen": true,
  
      // Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
      "window.nativeTabs": false,
  
      // Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
      "window.enableMenuBarMnemonics": true,
  
      // Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.
      //  - default: Menu is only hidden in full screen mode.
      //  - visible: Menu is always visible even in full screen mode.
      //  - toggle: Menu is hidden but can be displayed via Alt key.
      //  - hidden: Menu is always hidden.
      //  - compact: Menu is displayed as a compact button in the sidebar. This value is ignored when 'window.titleBarStyle' is 'native'.
      "window.menuBarVisibility": "default",
  
      // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
      //  - default: Open new windows in the center of the screen.
      //  - inherit: Open new windows with same dimension as last active one.
      //  - offset: Open new windows with same dimension as last active one with an offset position.
      //  - maximized: Open new windows maximized.
      //  - fullscreen: Open new windows in full screen mode.
      "window.newWindowDimensions": "default",
  
      // Controls whether files should open in a new window.
      // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
      //  - on: Files will open in a new window.
      //  - off: Files will open in the window with the files' folder open or the last active window.
      //  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
      "window.openFilesInNewWindow": "off",
  
      // Controls whether folders should open in a new window or replace the last active window.
      // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
      //  - on: Folders will open in a new window.
      //  - off: Folders will replace the last active window.
      //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
      "window.openFoldersInNewWindow": "default",
  
      // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
      // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
      //  - on: Open a new empty window.
      //  - off: Focus the last active running instance.
      "window.openWithoutArgumentsInNewWindow": "on",
  
      // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
      "window.restoreFullscreen": false,
  
      // Controls how windows are being reopened after a restart.
      //  - all: Reopen all windows.
      //  - folders: Reopen all folders. Empty workspaces will not be restored.
      //  - one: Reopen the last active window.
      //  - none: Never reopen a window. Always start with an empty one.
      "window.restoreWindows": "all",
  
      // Controls the window title based on the active editor. Variables are substituted based on the context:
      // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
      // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
      // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
      // - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
      // - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
      // - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
      // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
      // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
      // - `${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).
      // - `${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).
      // - `${appName}`: e.g. VS Code.
      // - `${remoteName}`: e.g. SSH
      // - `${dirty}`: a dirty indicator if the active editor is dirty.
      // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
      "window.title": "${activeEditorShort}${separator}${rootName}",
  
      // Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
      "window.titleBarStyle": "custom",
  
      // Separator used by `window.title`.
      "window.titleSeparator": " — ",
  
      
      // Files
  
      // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
      "files.associations": {},
  
      // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.
      "files.autoGuessEncoding": false,
  
      // Controls auto save of dirty editors. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
      //  - off: A dirty editor is never automatically saved.
      //  - afterDelay: A dirty editor is automatically saved after the configured `files.autoSaveDelay`.
      //  - onFocusChange: A dirty editor is automatically saved when the editor loses focus.
      //  - onWindowChange: A dirty editor is automatically saved when the window loses focus.
      "files.autoSave": "onWindowChange",
  
      // Controls the delay in ms after which a dirty editor is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
      "files.autoSaveDelay": 1000,
  
      // The default language mode that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language mode of the currently active text editor if any.
      "files.defaultLanguage": "",
  
      // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
      "files.enableTrash": true,
  
      // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
      "files.encoding": "utf8",
  
      // The default end of line character.
      //  - \n: LF
      //  - \r\n: CRLF
      //  - auto: Uses operating system specific end of line character.
      "files.eol": "auto",
  
      // Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
      "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/CVS": true,
        "**/.DS_Store": true
      },
  
      // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
      //  - off: Disable hot exit. A prompt will show when attempting to close a window with dirty files.
      //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of workspaces with unsaved files can be accessed via `File > Open Recent > More...`
      //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of workspaces with unsaved files can be accessed via `File > Open Recent > More...`
      "files.hotExit": "onExit",
  
      // When enabled, insert a final new line at the end of the file when saving it.
      "files.insertFinalNewline": false,
  
      // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
      "files.maxMemoryForLargeFilesMB": 4096,
  
      // Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
      "files.participants.timeout": 5000,
  
      // Restore the undo stack when a file is reopened.
      "files.restoreUndoStack": true,
  
      // A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
      //  - askUser: Will refuse to save and ask for resolving the save conflict manually.
      //  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
      "files.saveConflictResolution": "askUser",
  
      // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
      "files.trimFinalNewlines": false,
  
      // When enabled, will trim trailing whitespace when saving a file.
      "files.trimTrailingWhitespace": false,
  
      // Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of CPU time on startup, you can exclude large folders to reduce the initial load.
      "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true,
        "**/.hg/store/**": true
      },
  
      // Screencast Mode
  
      // Controls the font size (in pixels) of the screencast mode keyboard.
      "screencastMode.fontSize": 56,
  
      // Only show keyboard shortcuts in Screencast Mode.
      "screencastMode.onlyKeyboardShortcuts": false,
  
      // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
      "screencastMode.verticalOffset": 20,
  
      // Zen Mode
  
      // Controls whether turning on Zen Mode also centers the layout.
      "zenMode.centerLayout": true,
  
      // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
      "zenMode.fullScreen": true,
  
      // Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.
      "zenMode.hideActivityBar": true,
  
      // Controls whether turning on Zen Mode also hides the editor line numbers.
      "zenMode.hideLineNumbers": true,
  
      // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
      "zenMode.hideStatusBar": true,
  
      // Controls whether turning on Zen Mode also hides workbench tabs.
      "zenMode.hideTabs": true,
  
      // Controls whether a window should restore to zen mode if it was exited in zen mode.
      "zenMode.restore": false,
  
      // Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.
      "zenMode.silentNotifications": true,
  
      // File Explorer
  
      // Controls whether the explorer should automatically reveal and select files when opening them.
      //  - true: Files will be revealed and selected.
      //  - false: Files will not be revealed and selected.
      //  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
      "explorer.autoReveal": true,
  
      // Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
      "explorer.compactFolders": true,
  
      // Controls whether the explorer should ask for confirmation when deleting a file via the trash.
      "explorer.confirmDelete": true,
  
      // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
      "explorer.confirmDragAndDrop": true,
  
      // Controls whether file decorations should use badges.
      "explorer.decorations.badges": true,
  
      // Controls whether file decorations should use colors.
      "explorer.decorations.colors": true,
  
      // Controls whether the explorer should allow to move files and folders via drag and drop.
      "explorer.enableDragAndDrop": true,
  
      // Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
      //  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
      //  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
      "explorer.incrementalNaming": "simple",
  
      // Number of editors shown in the Open Editors pane.
      "explorer.openEditors.visible": 9,
  
      // Controls sorting order of files and folders in the explorer.
      //  - default: Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.
      //  - mixed: Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.
      //  - filesFirst: Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.
      //  - type: Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.
      //  - modified: Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.
      "explorer.sortOrder": "default",
  
      // Search
  
      // Controls the positioning of the actionbar on rows in the search view.
      //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
      //  - right: Always position the actionbar to the right.
      "search.actionsPosition": "auto",
  
      // Controls whether the search results will be collapsed or expanded.
      //  - auto: Files with less than 10 results are expanded. Others are collapsed.
      //  - alwaysCollapse
      //  - alwaysExpand
      "search.collapseResults": "alwaysExpand",
  
      // Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting.
      "search.exclude": {
        "**/node_modules": true,
        "**/bower_components": true,
        "**/*.code-search": true
      },
  
      // Controls whether to follow symlinks while searching.
      "search.followSymlinks": true,
  
      // Controls whether the search view should read or modify the shared find clipboard on macOS.
      "search.globalFindClipboard": false,
  
      // Controls sorting order of editor history in quick open when filtering.
      //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
      //  - recency: History entries are sorted by recency. More recently opened entries appear first.
      "search.quickOpen.history.filterSortOrder": "default",
  
      // Whether to include results from recently opened files in the file results for Quick Open.
      "search.quickOpen.includeHistory": true,
  
      // Whether to include results from a global symbol search in the file results for Quick Open.
      "search.quickOpen.includeSymbols": false,
  
      // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
      "search.searchEditor.defaultNumberOfContextLines": 1,
  
      // Configure effect of double clicking a result in a search editor.
      //  - selectWord: Double clicking selects the word under the cursor.
      //  - goToLocation: Double clicking opens the result in the active editor group.
      //  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
      "search.searchEditor.doubleClickBehaviour": "goToLocation",
  
      // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
      "search.searchEditor.reusePriorSearchConfiguration": false,
  
      // Search all files as you type.
      "search.searchOnType": true,
  
      // When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
      "search.searchOnTypeDebouncePeriod": 300,
  
      // Update workspace search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
      "search.seedOnFocus": false,
  
      // Enable seeding search from the word nearest the cursor when the active editor has no selection.
      "search.seedWithNearestWord": false,
  
      // Controls whether to show line numbers for search results.
      "search.showLineNumbers": false,
  
      // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
      "search.smartCase": false,
  
      // Controls sorting order of search results.
      //  - default: Results are sorted by folder and file names, in alphabetical order.
      //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
      //  - type: Results are sorted by file extensions, in alphabetical order.
      //  - modified: Results are sorted by file last modified date, in descending order.
      //  - countDescending: Results are sorted by count per file, in descending order.
      //  - countAscending: Results are sorted by count per file, in ascending order.
      "search.sortOrder": "default",
  
      // Controls whether to use global `.gitignore` and `.ignore` files when searching for files.
      "search.useGlobalIgnoreFiles": false,
  
      // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
      "search.useIgnoreFiles": true,
  
      // Controls whether to open Replace Preview when selecting or replacing a match.
      "search.useReplacePreview": true,
  
      // HTTP
  
      // The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
      "http.proxy": "",
  
      // The value to send as the `Proxy-Authorization` header for every network request.
      "http.proxyAuthorization": null,
  
      // Controls whether the proxy server certificate should be verified against the list of supplied CAs.
      "http.proxyStrictSSL": true,
  
      // Use the proxy support for extensions.
      //  - off: Disable proxy support for extensions.
      //  - on: Enable proxy support for extensions.
      //  - override: Enable proxy support for extensions, override request options.
      "http.proxySupport": "override",
  
      // Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)
      "http.systemCertificates": true,
  
      // Keyboard
  
      // Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
      "keyboard.dispatch": "code",
  
      // Enables the macOS touchbar buttons on the keyboard if available.
      "keyboard.touchbar.enabled": true,
  
      // A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`.
      "keyboard.touchbar.ignored": [],
  
      // Update
  
      // Enable to download and install new VS Code Versions in the background on Windows
      "update.enableWindowsBackgroundUpdates": true,
  
      // Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
      //  - none: Disable updates.
      //  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
      //  - start: Check for updates only on startup. Disable automatic background update checks.
      //  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
      "update.mode": "default",
  
      // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
      "update.showReleaseNotes": true,
  
      // Debug
  
      // Allow setting breakpoints in any file.
      "debug.allowBreakpointsEverywhere": false,
  
      // Controls if the debug console should be automatically closed when the debug session ends.
      "debug.console.closeOnEnd": false,
  
      // Controls the font family in the debug console.
      "debug.console.fontFamily": "default",
  
      // Controls the font size in pixels in the debug console.
      "debug.console.fontSize": 14,
  
      // Controls if the debug console should suggest previously typed input.
      "debug.console.historySuggestions": true,
  
      // Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
      "debug.console.lineHeight": 0,
  
      // Controls if the lines should wrap in the debug console.
      "debug.console.wordWrap": true,
  
      // Controls whether the workbench window should be focused when the debugger breaks.
      "debug.focusWindowOnBreak": true,
  
      // Show variable values inline in editor while debugging.
      "debug.inlineValues": false,
  
      // Controls when the internal debug console should open.
      "debug.internalConsoleOptions": "openOnFirstSessionStart",
  
      // Controls what to do when errors are encountered after running a preLaunchTask.
      //  - debugAnyway: Ignore task errors and start debugging.
      //  - showErrors: Show the Problems view and do not start debugging.
      //  - prompt: Prompt user.
      //  - abort: Cancel debugging.
      "debug.onTaskErrors": "prompt",
  
      // Controls when the debug view should open.
      "debug.openDebug": "openOnSessionStart",
  
      // Automatically open the explorer view at the end of a debug session.
      "debug.openExplorerOnEnd": false,
  
      // Controls whether breakpoints should be shown in the overview ruler.
      "debug.showBreakpointsInOverviewRuler": false,
  
      // Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
      "debug.showInlineBreakpointCandidates": true,
  
      // Controls when the debug status bar should be visible.
      //  - never: Never show debug in status bar
      //  - always: Always show debug in status bar
      //  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
      "debug.showInStatusBar": "onFirstSessionStart",
  
      // Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
      "debug.showSubSessionsInToolBar": false,
  
      // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
      "debug.toolBarLocation": "floating",
  
      // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
      "launch": {
        "configurations": [],
        "compounds": []
      },
  
      // JSON
  
      // Enable/disable default JSON formatter
      "json.format.enable": true,
  
      // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
      "json.maxItemsComputed": 5000,
  
      // When enabled, JSON schemas can be fetched from http and https locations.
      "json.schemaDownload.enable": true,
  
      // Associate schemas to JSON files in the current project
      "json.schemas": [],
  
      // Traces the communication between VS Code and the JSON language server.
      "json.trace.server": "off",
  
      // Markdown
  
      // Controls where links in markdown files should be opened.
      //  - currentGroup: Open links in the active editor group.
      //  - beside: Open links beside the active editor.
      "markdown.links.openLocation": "currentGroup",
  
      // Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
      "markdown.preview.breaks": false,
  
      // Double click in the markdown preview to switch to the editor.
      "markdown.preview.doubleClickToSwitchToEditor": true,
  
      // Controls the font family used in the markdown preview.
      "markdown.preview.fontFamily": "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'Ubuntu', 'Droid Sans', sans-serif",
  
      // Controls the font size in pixels used in the markdown preview.
      "markdown.preview.fontSize": 14,
  
      // Controls the line height used in the markdown preview. This number is relative to the font size.
      "markdown.preview.lineHeight": 1.6,
  
      // Enable or disable conversion of URL-like text to links in the markdown preview.
      "markdown.preview.linkify": true,
  
      // Mark the current editor selection in the markdown preview.
      "markdown.preview.markEditorSelection": true,
  
      // Controls how links to other markdown files in the markdown preview should be opened.
      //  - inPreview: Try to open links in the markdown preview
      //  - inEditor: Try to open links in the editor
      "markdown.preview.openMarkdownLinks": "inPreview",
  
      // When a markdown preview is scrolled, update the view of the editor.
      "markdown.preview.scrollEditorWithPreview": true,
  
      // When a markdown editor is scrolled, update the view of the preview.
      "markdown.preview.scrollPreviewWithEditor": true,
  
      // A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\' need to be written as '\\'.
      "markdown.styles": [],
  
      // Enable debug logging for the markdown extension.
      "markdown.trace": "off",
  
      // Extensions
  
      // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
      "extensions.autoCheckUpdates": true,
  
      // When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.
      "extensions.autoUpdate": true,
  
      // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
      "extensions.closeExtensionDetailsOnViewChange": false,
  
      // When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
      "extensions.confirmedUriHandlerExtensionIds": [],
  
      // When enabled, the notifications for extension recommendations will not be shown.
      "extensions.ignoreRecommendations": false,
  
      // Output
  
      // Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
      "output.smartScroll.enabled": true,
  
      // Tasks
  
      // Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
      "task.autoDetect": "on",
  
      // Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
      "task.problemMatchers.neverPrompt": false,
  
      // Controls whether to show the task detail for task that have a detail in the Run Task quick pick.
      "task.quickOpen.detail": true,
  
      // Controls the number of recent items tracked in task quick open dialog.
      "task.quickOpen.history": 30,
  
      // Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
      "task.quickOpen.showAll": false,
  
      // Controls whether the task quick pick is skipped when there is only one task to pick from.
      "task.quickOpen.skip": false,
  
      // Save all dirty editors before running a task.
      //  - always: Always saves all editors before running.
      //  - never: Never saves editors before running.
      //  - prompt: Prompts whether to save editors before running.
      "task.saveBeforeRun": "always",
  
      // Configures whether a warning is shown when a provider is slow
      "task.slowProviderWarning": true,
  
      // Problems
  
      // Controls whether Problems view should automatically reveal files when opening them.
      "problems.autoReveal": true,
  
      // Show Errors & Warnings on files and folder.
      "problems.decorations.enabled": true,
  
      // When enabled shows the current problem in the status bar.
      "problems.showCurrentInStatus": false,
  
      // Breadcrumb Navigation
  
      // Enable/disable navigation breadcrumbs.
      "breadcrumbs.enabled": true,
  
      // Controls whether and how file paths are shown in the breadcrumbs view.
      //  - on: Show the file path in the breadcrumbs view.
      //  - off: Do not show the file path in the breadcrumbs view.
      //  - last: Only show the last element of the file path in the breadcrumbs view.
      "breadcrumbs.filePath": "on",
  
      // Render breadcrumb items with icons.
      "breadcrumbs.icons": true,
  
      // When enabled breadcrumbs show `array`-symbols.
      "breadcrumbs.showArrays": true,
  
      // When enabled breadcrumbs show `boolean`-symbols.
      "breadcrumbs.showBooleans": true,
  
      // When enabled breadcrumbs show `class`-symbols.
      "breadcrumbs.showClasses": true,
  
      // When enabled breadcrumbs show `constant`-symbols.
      "breadcrumbs.showConstants": true,
  
      // When enabled breadcrumbs show `constructor`-symbols.
      "breadcrumbs.showConstructors": true,
  
      // When enabled breadcrumbs show `enumMember`-symbols.
      "breadcrumbs.showEnumMembers": true,
  
      // When enabled breadcrumbs show `enum`-symbols.
      "breadcrumbs.showEnums": true,
  
      // When enabled breadcrumbs show `event`-symbols.
      "breadcrumbs.showEvents": true,
  
      // When enabled breadcrumbs show `field`-symbols.
      "breadcrumbs.showFields": true,
  
      // When enabled breadcrumbs show `file`-symbols.
      "breadcrumbs.showFiles": true,
  
      // When enabled breadcrumbs show `function`-symbols.
      "breadcrumbs.showFunctions": true,
  
      // When enabled breadcrumbs show `interface`-symbols.
      "breadcrumbs.showInterfaces": true,
  
      // When enabled breadcrumbs show `key`-symbols.
      "breadcrumbs.showKeys": true,
  
      // When enabled breadcrumbs show `method`-symbols.
      "breadcrumbs.showMethods": true,
  
      // When enabled breadcrumbs show `module`-symbols.
      "breadcrumbs.showModules": true,
  
      // When enabled breadcrumbs show `namespace`-symbols.
      "breadcrumbs.showNamespaces": true,
  
      // When enabled breadcrumbs show `null`-symbols.
      "breadcrumbs.showNull": true,
  
      // When enabled breadcrumbs show `number`-symbols.
      "breadcrumbs.showNumbers": true,
  
      // When enabled breadcrumbs show `object`-symbols.
      "breadcrumbs.showObjects": true,
  
      // When enabled breadcrumbs show `operator`-symbols.
      "breadcrumbs.showOperators": true,
  
      // When enabled breadcrumbs show `package`-symbols.
      "breadcrumbs.showPackages": true,
  
      // When enabled breadcrumbs show `property`-symbols.
      "breadcrumbs.showProperties": true,
  
      // When enabled breadcrumbs show `string`-symbols.
      "breadcrumbs.showStrings": true,
  
      // When enabled breadcrumbs show `struct`-symbols.
      "breadcrumbs.showStructs": true,
  
      // When enabled breadcrumbs show `typeParameter`-symbols.
      "breadcrumbs.showTypeParameters": true,
  
      // When enabled breadcrumbs show `variable`-symbols.
      "breadcrumbs.showVariables": true,
  
      // Controls whether and how symbols are shown in the breadcrumbs view.
      //  - on: Show all symbols in the breadcrumbs view.
      //  - off: Do not show symbols in the breadcrumbs view.
      //  - last: Only show the current symbol in the breadcrumbs view.
      "breadcrumbs.symbolPath": "on",
  
      // Controls how symbols are sorted in the breadcrumbs outline view.
      //  - position: Show symbol outline in file position order.
      //  - name: Show symbol outline in alphabetical order.
      //  - type: Show symbol outline in symbol type order.
      "breadcrumbs.symbolSortOrder": "position",
  
      // Outline
  
      // Render Outline Elements with Icons.
      "outline.icons": true,
  
      // Use badges for Errors & Warnings.
      "outline.problems.badges": true,
  
      // Use colors for Errors & Warnings.
      "outline.problems.colors": true,
  
      // Show Errors & Warnings on Outline Elements.
      "outline.problems.enabled": true,
  
      // When enabled outline shows `array`-symbols.
      "outline.showArrays": true,
  
      // When enabled outline shows `boolean`-symbols.
      "outline.showBooleans": true,
  
      // When enabled outline shows `class`-symbols.
      "outline.showClasses": true,
  
      // When enabled outline shows `constant`-symbols.
      "outline.showConstants": true,
  
      // When enabled outline shows `constructor`-symbols.
      "outline.showConstructors": true,
  
      // When enabled outline shows `enumMember`-symbols.
      "outline.showEnumMembers": true,
  
      // When enabled outline shows `enum`-symbols.
      "outline.showEnums": true,
  
      // When enabled outline shows `event`-symbols.
      "outline.showEvents": true,
  
      // When enabled outline shows `field`-symbols.
      "outline.showFields": true,
  
      // When enabled outline shows `file`-symbols.
      "outline.showFiles": true,
  
      // When enabled outline shows `function`-symbols.
      "outline.showFunctions": true,
  
      // When enabled outline shows `interface`-symbols.
      "outline.showInterfaces": true,
  
      // When enabled outline shows `key`-symbols.
      "outline.showKeys": true,
  
      // When enabled outline shows `method`-symbols.
      "outline.showMethods": true,
  
      // When enabled outline shows `module`-symbols.
      "outline.showModules": true,
  
      // When enabled outline shows `namespace`-symbols.
      "outline.showNamespaces": true,
  
      // When enabled outline shows `null`-symbols.
      "outline.showNull": true,
  
      // When enabled outline shows `number`-symbols.
      "outline.showNumbers": true,
  
      // When enabled outline shows `object`-symbols.
      "outline.showObjects": true,
  
      // When enabled outline shows `operator`-symbols.
      "outline.showOperators": true,
  
      // When enabled outline shows `package`-symbols.
      "outline.showPackages": true,
  
      // When enabled outline shows `property`-symbols.
      "outline.showProperties": true,
  
      // When enabled outline shows `string`-symbols.
      "outline.showStrings": true,
  
      // When enabled outline shows `struct`-symbols.
      "outline.showStructs": true,
  
      // When enabled outline shows `typeParameter`-symbols.
      "outline.showTypeParameters": true,
  
      // When enabled outline shows `variable`-symbols.
      "outline.showVariables": true,
  
      // Timeline
  
      // An array of Timeline sources that should be excluded from the Timeline view
      "timeline.excludeSources": null,
  
      // The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view
      "timeline.pageSize": null,
  

  
      // Remote
  
      // When enabled extensions are downloaded locally and installed on remote.
      "remote.downloadExtensionsLocally": false,
  
      // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
      "remote.extensionKind": {
        "pub.name": ["ui"]
      },
  
      // Restores the ports you forwarded in a workspace.
      "remote.restoreForwardedPorts": false,
  
      // Git
  
      // Controls whether force push (with or without lease) is enabled.
      "git.allowForcePush": false,
  
      // Always show the Staged Changes resource group.
      "git.alwaysShowStagedChangesResourceGroup": false,
  
      // Controls the signoff flag for all commits.
      "git.alwaysSignOff": false,
  
      // When enabled, commits will automatically be fetched from the default remote of the current Git repository.
      "git.autofetch": false,
  
      // Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
      "git.autofetchPeriod": 180,
  
      // Whether auto refreshing is enabled.
      "git.autorefresh": true,
  
      // Configures when repositories should be automatically detected.
      //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
      //  - false: Disable automatic repository scanning.
      //  - subFolders: Scan for subfolders of the currently opened folder.
      //  - openEditors: Scan for parent folders of open files.
      "git.autoRepositoryDetection": true,
  
      // Stash any changes before pulling and restore them after successful pull.
      "git.autoStash": false,
  
      // Controls the sort order for branches.
      "git.branchSortOrder": "committerdate",
  
      // A regular expression to validate new branch names.
      "git.branchValidationRegex": "",
  
      // The character to replace whitespace in new branch names.
      "git.branchWhitespaceChar": "-",
  
      // Controls what type of branches are listed when running `Checkout to...`.
      //  - all: Show all references.
      //  - local: Show only local branches.
      //  - tags: Show only tags.
      //  - remote: Show only remote branches.
      "git.checkoutType": ["local", "tags", "remote"],
  
      // Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
      "git.confirmEmptyCommits": true,
  
      // Controls whether to ask for confirmation before force-pushing.
      "git.confirmForcePush": true,
  
      // Confirm before synchronizing git repositories.
      "git.confirmSync": true,
  
      // Controls the Git count badge.
      //  - all: Count all changes.
      //  - tracked: Count only tracked changes.
      //  - off: Turn off counter.
      "git.countBadge": "all",
  
      // Controls whether Git contributes colors and badges to the explorer and the open editors view.
      "git.decorations.enabled": true,
  
      // The default location to clone a git repository.
      "git.defaultCloneDirectory": null,
  
      // Controls whether to automatically detect git submodules.
      "git.detectSubmodules": true,
  
      // Controls the limit of git submodules detected.
      "git.detectSubmodulesLimit": 10,
  
      // Enables commit signing with GPG.
      "git.enableCommitSigning": false,
  
      // Whether git is enabled.
      "git.enabled": true,
  
      // Commit all changes when there are no staged changes.
      "git.enableSmartCommit": false,
  
      // Controls whether the Git Sync command appears in the status bar.
      "git.enableStatusBarSync": true,
  
      // When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
      "git.fetchOnPull": false,
  
      // List of git repositories to ignore.
      "git.ignoredRepositories": [],
  
      // Ignores the legacy Git warning.
      "git.ignoreLegacyWarning": false,
  
      // Ignores the warning when there are too many changes in a repository.
      "git.ignoreLimitWarning": false,
  
      // Ignores the warning when Git is missing.
      "git.ignoreMissingGitWarning": false,
  
      // Controls when to show commit message input validation.
      "git.inputValidation": "warn",
  
      // Controls the commit message length threshold for showing a warning.
      "git.inputValidationLength": 72,
  
      // Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
      "git.inputValidationSubjectLength": 50,
  
      // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
      "git.openDiffOnClick": true,
  
      // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows).
      "git.path": null,
  
      // Runs a git command after a successful commit.
      //  - none: Don't run any command after a commit.
      //  - push: Run 'Git Push' after a successful commit.
      //  - sync: Run 'Git Sync' after a successful commit.
      "git.postCommitCommand": "none",
  
      // Controls whether Git should check for unsaved files before committing.
      //  - always: Check for any unsaved files.
      //  - staged: Check only for unsaved staged files.
      //  - never: Disable this check.
      "git.promptToSaveFilesBeforeCommit": "always",
  
      // Fetch all tags when pulling.
      "git.pullTags": true,
  
      // Force git to use rebase when running the sync command.
      "git.rebaseWhenSync": false,
  
      // List of paths to search for git repositories in.
      "git.scanRepositories": [],
  
      // Controls whether to show the commit input in the Git source control panel.
      "git.showCommitInput": true,
  
      // Controls whether to show an inline Open File action in the Git changes view.
      "git.showInlineOpenFileAction": true,
  
      // Controls whether git actions should show progress.
      "git.showProgress": true,
  
      // Controls whether to show a notification when a push is successful.
      "git.showPushSuccessNotification": false,
  
      // Control which changes are automatically staged by Smart Commit.
      //  - all: Automatically stage all changes.
      //  - tracked: Automatically stage tracked changes only.
      "git.smartCommitChanges": "all",
  
      // Suggests to enable smart commit (commit all changes when there are no staged changes).
      "git.suggestSmartCommit": true,
  
      // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
      "git.supportCancellation": false,
  
      // Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
      "git.terminalAuthentication": true,
  
      // Controls how untracked changes behave.
      //  - mixed: All changes, tracked and untracked, appear together and behave equally.
      //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
      //  - hidden: Untracked changes are hidden and excluded from several actions.
      "git.untrackedChanges": "mixed",
  
      // Controls whether force pushing uses the safer force-with-lease variant.
      "git.useForcePushWithLease": true,
  
      // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
      "github.gitAuthentication": true,
  
      // Merge Conflict
  
      // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
      "merge-conflict.autoNavigateNextConflict.enabled": false,
  
      // Create a CodeLens for merge conflict blocks within editor.
      "merge-conflict.codeLens.enabled": true,
  
      // Create decorators for merge conflict blocks within editor.
      "merge-conflict.decorators.enabled": true,
  
      // Controls where the diff view should be opened when comparing changes in merge conflicts.
      //  - Current: Open the diff view in the current editor group.
      //  - Beside: Open the diff view next to the current editor group.
      //  - Below: Open the diff view below the current editor group.
      "merge-conflict.diffViewPosition": "Current"
    }
  }